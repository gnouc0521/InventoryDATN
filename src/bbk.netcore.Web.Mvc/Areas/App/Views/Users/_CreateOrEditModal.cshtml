@using Abp.Authorization.Users
@using Abp.Configuration
@using Abp.Json
@using Abp.Zero.Configuration
@using bbk.netcore.Authorization.Users
@using bbk.netcore.Web.Areas.App.Models.Common.Modals
@using bbk.netcore.Web.Areas.App.Models.Users
@using bbk.netcore

@model CreateOrEditUserModalViewModel

<script>
    window.passwordComplexitySetting = @Html.Raw(Model.PasswordComplexitySetting.ToJsonString(indented: true));
</script>
@await Html.PartialAsync("~/Areas/App/Views/Common/Modals/_ModalHeaderSmartAd.cshtml", new ModalHeaderViewModel(Model.IsEditMode ? (L("EditUser") + ": " + Model.User.UserName) : L("CreateNewUser")))

<div class="modal-body">
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item">
            <a href="#UserInformationsTab" class="nav-link active" data-toggle="tab" role="tab">
                <i class="fal fa-user mr-1"></i> @(new FixedLocalizableString("Thông tin người dùng"))
            </a>
        </li>
        <li class="nav-item">
                <a href="#RolesTab" data-toggle="tab" role="tab" class="nav-link">
                    @L("Roles") <b class="badge badge-primary"><span id="assigned-role-count">@Model.AssignedRoleCount</span></b>
                </a>
            </li>
       @* <li class="nav-item">
            <a href="#OrganizationUnitsTab" data-toggle="tab" role="tab" class="nav-link m-tabs__link">
                @(new FixedLocalizableString("Tổ chức"))
            </a>
        </li>*@
    </ul>
    <div class="tab-content border border-top-0 p-3">
        <div class="tab-pane fade show active" id="UserInformationsTab" role="tabpanel">
            <form name="UserInformationsForm" role="form" novalidate class="form-validation needs-validation">

                @if (Model.IsEditMode)
                {
                    <input type="hidden" name="Id" value="@Model.User.Id" />}

                <div class="row">
                    <div class="col-sm-3 text-center margin-top-15 margin-bottom-15">
                        @if (Model.ProfilePictureId.HasValue)
                        {
                            <img src="@Url.Action("GetProfilePictureById", "Profile", new { area = string.Empty })?id=@(Model.ProfilePictureId.Value)" width="128" height="128" class="img-thumbnail img-rounded user-edit-dialog-profile-image" /> }
                        else
                        {
                            <img src="@Url.Content("~/Common/Images/default-profile-picture.png")" width="128" height="128" class="img-thumbnail img-rounded user-edit-dialog-profile-image" />}
                    </div>
                    <div class="col-sm-9">
                        <div class="form-row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label" for="validationCustomUsername">Tài khoản <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <input id="UserName" type="text" @Html.Raw(!Model.CanChangeUserName ? "disabled=\"disabled\"" : "") name="UserName" class="form-control" value="@Model.User.UserName" required maxlength="@AbpUserBase.MaxUserNameLength" placeholder="Tài khoản" aria-describedby="inputGroupPrepend">
                                    @if (!Model.CanChangeUserName)
                                    {<span class="help-block">
                                            @(new FixedLocalizableString("CanNotChangeAdminUserName"))
                                        </span>}
                                    <div class="invalid-feedback">
                                        @(new FixedLocalizableString("Trường này không được để trống!"))
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label" for="Name">
                                    @(new FixedLocalizableString("Tên")) <span class="text-danger">*</span>
                                </label>
                                <input id="Name" class="form-control" value="@Model.User.Name" type="text" name="Name" placeholder="@(new FixedLocalizableString("Tên"))" required maxlength="@bbk.netcore.Authorization.Users.User.MaxNameLength" />
                                @*<div class="valid-feedback">
                                        Looks good!
                                    </div>*@
                            <div class="invalid-feedback">
                                @(new FixedLocalizableString("Trường này không được để trống!"))
                            </div>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label" for="Surname">
                                    @(new FixedLocalizableString("Tên đệm")) <span class="text-danger">*</span></label>
                                <input id="Surname" type="text" name="Surname" class="form-control" value="@Model.User.Surname" required maxlength="@bbk.netcore.Authorization.Users.User.MaxSurnameLength" placeholder="Tên đệm" />
                                @*<div class="valid-feedback">
                                        Looks good!
                                    </div>*@
                            <div class="invalid-feedback">
                                @(new FixedLocalizableString("Trường này không được để trống!"))
                            </div>
                            </div>
                        </div>
                        @*<div class="form-group">
                                <label for="Name">@L("Name")</label>
                                <input id="Name" class="form-control" value="@Model.User.Name" type="text" name="Name" required maxlength="@bbk.netcore.Authorization.Users.User.MaxNameLength">
                            </div>

                            <div class="form-group">
                                <label for="Surname">@L("Surname")</label>
                                <input id="Surname" type="text" name="Surname" class="form-control" value="@Model.User.Surname" required maxlength="@bbk.netcore.Authorization.Users.User.MaxSurnameLength">
                            </div>*@
                        <div class="form-row">
                            <div class="col-md-12 mb-3">
                                <label class="form-label" for="EmailAddress">
                                    @(new FixedLocalizableString("Địa chỉ email")) <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text" id="inputGroupPrepend">&commat;</span>
                                    </div>
                                    <input id="EmailAddress" type="email" name="EmailAddress" class="form-control" value="@Model.User.EmailAddress" aria-describedby="inputGroupPrepend" required maxlength="@AbpUserBase.MaxEmailAddressLength">
                                    <div class="invalid-feedback">
                                        @(new FixedLocalizableString("Trường này không được để trống!"))
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-row form-group">
                    @*<div class="col-12 mb-3">
                            <div class="custom-control custom-checkbox">
                                <input id="EditUser_SetRandomPassword" type="checkbox" name="SetRandomPassword" value="false" class="custom-control-input">
                                <label class="custom-control-label" for="EditUser_SetRandomPassword">@L("SetRandomPassword")</label>
                            </div>
                        </div>*@
                    @*<div class="col-6 mb-3" style="@(Model.IsEditMode ? "display:block" : "display:none")">*@
                    <div class="col-6 mb-3">
                        <label class="form-label" for="EditUser_Password">
                            @(new FixedLocalizableString("Mật khẩu")) <span class="text-danger">*</span></label>
                        <input id="EditUser_Password" type="password" name="Password" class="form-control auto-complete-off" readonly onfocus="this.removeAttribute('readonly');"
                               maxlength="@bbk.netcore.Authorization.Users.User.MaxPlainPasswordLength" autocomplete="off">
                        <div class="invalid-feedback">
                            @(new FixedLocalizableString("Trường này không được để trống!"))
                        </div>
                    </div>
                    <div class="col-6 mb-3">
                        <label for="PasswordRepeat" class="form-label">
                            @(new FixedLocalizableString("Nhắc lại mật khẩu")) <span class="text-danger">*</span></label>
                        <input id="PasswordRepeat" type="password" name="PasswordRepeat" class="form-control auto-complete-off" readonly onfocus="this.removeAttribute('readonly');"
                               maxlength="@bbk.netcore.Authorization.Users.User.MaxPlainPasswordLength" equalto="#EditUser_Password" autocomplete="off">
                        <div class="invalid-feedback">
                            @(new FixedLocalizableString("Trường này không được để trống!"))
                        </div>
                    </div>
                    <div class="col-12 mb-3">
                        <div class="custom-control custom-checkbox">
                            <input id="EditUser_IsActive" type="checkbox" name="IsActive" value="true" @Html.Raw(Model.User.IsActive ? "checked=\"checked\"" : "") class="custom-control-input">
                            <label class="custom-control-label" for="EditUser_IsActive">
                                @(new FixedLocalizableString("Đang hoạt động"))</label>
                        </div>
                    </div>
                </div>
                @*
                            <div class="row">

                                        <div class="form-group">
                                            <label for="EmailAddress">@L("EmailAddress")</label>
                                            <input id="EmailAddress" type="email" name="EmailAddress" class="form-control" value="@Model.User.EmailAddress" required maxlength="@AbpUserBase.MaxEmailAddressLength">
                                        </div>

                                        <div class="form-group">
                                        <label for="PhoneNumber">@L("PhoneNumber")</label>
                                        <input id="PhoneNumber" type="text" name="PhoneNumber" class="form-control" value="@Model.User.PhoneNumber" maxlength="@AppConsts.MaxPhoneNumberLength">
                                    </div>

                    </div>
                *@
                <!--
                    <div class="m-checkbox-list">
                        <label for="EditUser_SetRandomPassword" class="m-checkbox">
                            <input id="EditUser_SetRandomPassword" type="checkbox" name="SetRandomPassword" value="false" @Html.Raw(Model.IsEditMode ? "" : "checked=\"checked\"") />
                            @L("SetRandomPassword")
                            <span></span>
                        </label>
                    </div>
                -->
                @*<div class="form-group user-password" style="@(Model.IsEditMode ? "display:block" : "display:none")">
                        <label for="EditUser_Password">@L("Password")</label>
                        <input id="EditUser_Password" type="password" name="Password" class="form-control auto-complete-off" readonly onfocus="this.removeAttribute('readonly');"
                               maxlength="@bbk.netcore.Authorization.Users.User.MaxPlainPasswordLength" autocomplete="off">
                    </div>

                    <div class="form-group user-password" style="@(Model.IsEditMode ? "display:block" : "display:none")">
                        <label for="PasswordRepeat">@L("PasswordRepeat")</label>
                        <input id="PasswordRepeat" type="password" name="PasswordRepeat" class="form-control auto-complete-off" readonly onfocus="this.removeAttribute('readonly');"
                               maxlength="@bbk.netcore.Authorization.Users.User.MaxPlainPasswordLength" equalto="#EditUser_Password" autocomplete="off">
                    </div>
                *@
                @*<div class="m-checkbox-list" style="display:none;">
                                <label for="EditUser_ShouldChangePasswordOnNextLogin" class="m-checkbox">
                                    <input id="EditUser_ShouldChangePasswordOnNextLogin" type="checkbox" name="ShouldChangePasswordOnNextLogin" value="false" @Html.Raw(Model.User.ShouldChangePasswordOnNextLogin ? "checked=\"checked\"" : "")>
                                    @L("ShouldChangePasswordOnNextLogin")
                                    <span></span>
                                </label>
                                <label for="EditUser_SendActivationEmail" class="m-checkbox">
                                    <input id="EditUser_SendActivationEmail" type="checkbox" name="SendActivationEmail" value="false" @Html.Raw(Model.IsEditMode ? "" : "checked=\"checked\"")>
                                    @L("SendActivationEmail")
                                    <span></span>
                                </label>
                                @if (SettingManager.GetSettingValue<bool>(AbpZeroSettingNames.UserManagement.TwoFactorLogin.IsEnabled))
                                {
                    <label for="EditUser_IsTwoFactorEnabled" class="m-checkbox">
                        <input id="EditUser_IsTwoFactorEnabled" type="checkbox" name="IsTwoFactorEnabled" value="false" @Html.Raw(Model.User.IsTwoFactorEnabled ? "checked=\"checked\"" : "")>
                        @L("IsTwoFactorEnabled")
                        <span></span>
                    </label>}
                                @if (SettingManager.GetSettingValue<bool>(AbpZeroSettingNames.UserManagement.UserLockOut.IsEnabled))
                                {
                    <label for="EditUser_IsLockoutEnabled" data-toggle="tooltip" title="@L("IsLockoutEnabled_Hint")" class="m-checkbox">
                        <input id="EditUser_IsLockoutEnabled" type="checkbox" name="IsLockoutEnabled" value="false" @Html.Raw(Model.User.IsLockoutEnabled ? "checked=\"checked\"" : "")>
                        @L("IsLockoutEnabled")
                        <span></span>
                    </label>}
                            </div>*@

            </form>
        </div>
        <div class="tab-pane fade show" id="RolesTab" role="tabpanel">
            <div class="user-role-checkbox-list">
                @foreach (var role in Model.Roles)
                {
                    <div class="m-checkbox-list">
                        <label for="EditUser_@(role.RoleName)" class="m-checkbox">
                            <input id="EditUser_@(role.RoleName)" type="checkbox" name="@(role.RoleName)" value="true" @Html.Raw(role.IsAssigned ? "checked=\"checked\"" : "")>
                            @role.RoleDisplayName
                            <span></span>
                        </label>
                    </div> <div class="custom-control custom-checkbox">
                            <input id="EditUser_@(role.RoleName)" type="checkbox" name="@(role.RoleName)" value="true" @Html.Raw(role.IsAssigned ? "checked=\"checked\"" : "") class="custom-control-input" />
                           @* <label class="custom-control-label" for="EditUser_@(role.RoleName)">Unchecked</label>*@
                        </div>}
</div>
        </div>
        <div class="tab-pane fade show" id="OrganizationUnitsTab" role="tabpanel">
            <div class="list-group">
                @await Html.PartialAsync("~/Areas/App/Views/Common/_OrganizationTree.cshtml", Model)
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Areas/App/Views/Common/Modals/_ModalFooterWithSaveAndCancel.cshtml")
