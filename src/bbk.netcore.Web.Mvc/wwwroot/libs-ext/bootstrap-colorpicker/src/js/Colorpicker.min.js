/**
 * Minified by jsDelivr using Terser v5.9.0.
 * Original file: /npm/bootstrap-colorpicker@3.4.0/src/js/Colorpicker.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";import Extension from"./Extension";import defaults from"./options";import coreExtensions from"extensions";import $ from"jquery";import SliderHandler from"./SliderHandler";import PopupHandler from"./PopupHandler";import InputHandler from"./InputHandler";import ColorHandler from"./ColorHandler";import PickerHandler from"./PickerHandler";import AddonHandler from"./AddonHandler";import ColorItem from"./ColorItem";let colorPickerIdCounter=0,root="undefined"!=typeof self?self:this;class Colorpicker{static get Color(){return ColorItem}static get Extension(){return Extension}get color(){return this.colorHandler.color}get format(){return this.colorHandler.format}get picker(){return this.pickerHandler.picker}constructor(e,t){colorPickerIdCounter+=1,this.id=colorPickerIdCounter,this.lastEvent={alias:null,e:null},this.element=$(e).addClass("colorpicker-element").attr("data-colorpicker-id",this.id),this.options=$.extend(!0,{},defaults,t,this.element.data()),this.disabled=!1,this.extensions=[],this.container=!0===this.options.container||!0!==this.options.container&&!0===this.options.inline?this.element:this.options.container,this.container=!1!==this.container&&$(this.container),this.inputHandler=new InputHandler(this),this.colorHandler=new ColorHandler(this),this.sliderHandler=new SliderHandler(this),this.popupHandler=new PopupHandler(this,root),this.pickerHandler=new PickerHandler(this),this.addonHandler=new AddonHandler(this),this.init(),$($.proxy((function(){this.trigger("colorpickerCreate")}),this))}init(){this.addonHandler.bind(),this.inputHandler.bind(),this.initExtensions(),this.colorHandler.bind(),this.pickerHandler.bind(),this.sliderHandler.bind(),this.popupHandler.bind(),this.pickerHandler.attach(),this.update(),this.inputHandler.isDisabled()&&this.disable()}initExtensions(){Array.isArray(this.options.extensions)||(this.options.extensions=[]),this.options.debug&&this.options.extensions.push({name:"debugger"}),this.options.extensions.forEach((e=>{this.registerExtension(Colorpicker.extensions[e.name.toLowerCase()],e.options||{})}))}registerExtension(e,t={}){let i=new e(this,t);return this.extensions.push(i),i}destroy(){let e=this.color;this.sliderHandler.unbind(),this.inputHandler.unbind(),this.popupHandler.unbind(),this.colorHandler.unbind(),this.addonHandler.unbind(),this.pickerHandler.unbind(),this.element.removeClass("colorpicker-element").removeData("colorpicker").removeData("color").off(".colorpicker"),this.trigger("colorpickerDestroy",e)}show(e){this.popupHandler.show(e)}hide(e){this.popupHandler.hide(e)}toggle(e){this.popupHandler.toggle(e)}getValue(e=null){let t=this.colorHandler.color;return t=t instanceof ColorItem?t:e,t instanceof ColorItem?t.string(this.format):t}setValue(e){if(this.isDisabled())return;let t=this.colorHandler;t.hasColor()&&e&&t.color.equals(e)||!t.hasColor()&&!e||(t.color=e?t.createColor(e,this.options.autoInputFallback,this.options.autoHexInputFallback):null,this.trigger("colorpickerChange",t.color,e),this.update())}update(){this.colorHandler.hasColor()?this.inputHandler.update():this.colorHandler.assureColor(),this.addonHandler.update(),this.pickerHandler.update(),this.trigger("colorpickerUpdate")}enable(){return this.inputHandler.enable(),this.disabled=!1,this.picker.removeClass("colorpicker-disabled"),this.trigger("colorpickerEnable"),!0}disable(){return this.inputHandler.disable(),this.disabled=!0,this.picker.addClass("colorpicker-disabled"),this.trigger("colorpickerDisable"),!0}isEnabled(){return!this.isDisabled()}isDisabled(){return!0===this.disabled}trigger(e,t=null,i=null){this.element.trigger({type:e,colorpicker:this,color:t||this.color,value:i||this.getValue()})}}Colorpicker.extensions=coreExtensions;export default Colorpicker;
//# sourceMappingURL=/sm/e26f07864d66e527236fcb8e5f69b676f6d94754bed1b38974ec24e84d445aaf.map