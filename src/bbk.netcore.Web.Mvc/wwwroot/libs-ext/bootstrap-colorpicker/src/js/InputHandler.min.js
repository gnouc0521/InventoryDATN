/**
 * Minified by jsDelivr using Terser v5.9.0.
 * Original file: /npm/bootstrap-colorpicker@3.4.0/src/js/InputHandler.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";import $ from"jquery";import ColorItem from"./ColorItem";class InputHandler{constructor(t){this.colorpicker=t,this.input=this.colorpicker.element.is("input")?this.colorpicker.element:!!this.colorpicker.options.input&&this.colorpicker.element.find(this.colorpicker.options.input),this.input&&0===this.input.length&&(this.input=!1),this._initValue()}bind(){this.hasInput()&&(this.input.on({"keyup.colorpicker":$.proxy(this.onkeyup,this)}),this.input.on({"change.colorpicker":$.proxy(this.onchange,this)}))}unbind(){this.hasInput()&&this.input.off(".colorpicker")}_initValue(){if(!this.hasInput())return;let t="";[this.input.val(),this.input.data("color"),this.input.attr("data-color")].map((i=>{i&&""===t&&(t=i)})),t instanceof ColorItem?t=this.getFormattedColor(t.string(this.colorpicker.format)):"string"==typeof t||t instanceof String||(t=""),this.input.prop("value",t)}getValue(){return!!this.hasInput()&&this.input.val()}setValue(t){if(!this.hasInput())return;let i=this.input.prop("value");(t=t||"")!==(i||"")&&(this.input.prop("value",t),this.input.trigger({type:"change",colorpicker:this.colorpicker,color:this.colorpicker.color,value:t}))}getFormattedColor(t=null){return(t=t||this.colorpicker.colorHandler.getColorString())?(t=this.colorpicker.colorHandler.resolveColorDelegate(t,!1),!1===this.colorpicker.options.useHashPrefix&&(t=t.replace(/^#/g,"")),t):""}hasInput(){return!1!==this.input}isEnabled(){return this.hasInput()&&!this.isDisabled()}isDisabled(){return this.hasInput()&&!0===this.input.prop("disabled")}disable(){this.hasInput()&&this.input.prop("disabled",!0)}enable(){this.hasInput()&&this.input.prop("disabled",!1)}update(){this.hasInput()&&(!1===this.colorpicker.options.autoInputFallback&&this.colorpicker.colorHandler.isInvalidColor()||this.setValue(this.getFormattedColor()))}onchange(t){this.colorpicker.lastEvent.alias="input.change",this.colorpicker.lastEvent.e=t;let i=this.getValue();i!==t.value&&this.colorpicker.setValue(i)}onkeyup(t){this.colorpicker.lastEvent.alias="input.keyup",this.colorpicker.lastEvent.e=t;let i=this.getValue();i!==t.value&&this.colorpicker.setValue(i)}}export default InputHandler;
//# sourceMappingURL=/sm/de358b84e5c55fda3716df7b1999b827b6358e6d4be68b840e4a6df129bb0707.map