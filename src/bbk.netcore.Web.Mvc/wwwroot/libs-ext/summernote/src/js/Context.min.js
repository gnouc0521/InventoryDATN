/**
 * Minified by jsDelivr using Terser v5.9.0.
 * Original file: /npm/summernote@0.8.20/src/js/Context.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import $ from"jquery";import func from"./core/func";import lists from"./core/lists";import dom from"./core/dom";export default class Context{constructor(t,e){this.$note=t,this.memos={},this.modules={},this.layoutInfo={},this.options=$.extend(!0,{},e),$.summernote.ui=$.summernote.ui_template(this.options),this.ui=$.summernote.ui,this.initialize()}initialize(){return this.layoutInfo=this.ui.createLayout(this.$note),this._initialize(),this.$note.hide(),this}destroy(){this._destroy(),this.$note.removeData("summernote"),this.ui.removeLayout(this.$note,this.layoutInfo)}reset(){const t=this.isDisabled();this.code(dom.emptyPara),this._destroy(),this._initialize(),t&&this.disable()}_initialize(){this.options.id=func.uniqueId($.now()),this.options.container=this.options.container||this.layoutInfo.editor;const t=$.extend({},this.options.buttons);Object.keys(t).forEach((e=>{this.memo("button."+e,t[e])}));const e=$.extend({},this.options.modules,$.summernote.plugins||{});Object.keys(e).forEach((t=>{this.module(t,e[t],!0)})),Object.keys(this.modules).forEach((t=>{this.initializeModule(t)}))}_destroy(){Object.keys(this.modules).reverse().forEach((t=>{this.removeModule(t)})),Object.keys(this.memos).forEach((t=>{this.removeMemo(t)})),this.triggerEvent("destroy",this)}code(t){const e=this.invoke("codeview.isActivated");if(void 0===t)return this.invoke("codeview.sync"),e?this.layoutInfo.codable.val():this.layoutInfo.editable.html();e?this.invoke("codeview.sync",t):this.layoutInfo.editable.html(t),this.$note.val(t),this.triggerEvent("change",t,this.layoutInfo.editable)}isDisabled(){return"false"===this.layoutInfo.editable.attr("contenteditable")}enable(){this.layoutInfo.editable.attr("contenteditable",!0),this.invoke("toolbar.activate",!0),this.triggerEvent("disable",!1),this.options.editing=!0}disable(){this.invoke("codeview.isActivated")&&this.invoke("codeview.deactivate"),this.layoutInfo.editable.attr("contenteditable",!1),this.options.editing=!1,this.invoke("toolbar.deactivate",!0),this.triggerEvent("disable",!0)}triggerEvent(){const t=lists.head(arguments),e=lists.tail(lists.from(arguments)),i=this.options.callbacks[func.namespaceToCamel(t,"on")];i&&i.apply(this.$note[0],e),this.$note.trigger("summernote."+t,e)}initializeModule(t){const e=this.modules[t];e.shouldInitialize=e.shouldInitialize||func.ok,e.shouldInitialize()&&(e.initialize&&e.initialize(),e.events&&dom.attachEvents(this.$note,e.events))}module(t,e,i){if(1===arguments.length)return this.modules[t];this.modules[t]=new e(this),i||this.initializeModule(t)}removeModule(t){const e=this.modules[t];e.shouldInitialize()&&(e.events&&dom.detachEvents(this.$note,e.events),e.destroy&&e.destroy()),delete this.modules[t]}memo(t,e){if(1===arguments.length)return this.memos[t];this.memos[t]=e}removeMemo(t){this.memos[t]&&this.memos[t].destroy&&this.memos[t].destroy(),delete this.memos[t]}createInvokeHandlerAndUpdateState(t,e){return i=>{this.createInvokeHandler(t,e)(i),this.invoke("buttons.updateCurrentStyle")}}createInvokeHandler(t,e){return i=>{i.preventDefault();const s=$(i.target);this.invoke(t,e||s.closest("[data-value]").data("value"),s)}}invoke(){const t=lists.head(arguments),e=lists.tail(lists.from(arguments)),i=t.split("."),s=i.length>1,o=s&&lists.head(i),n=s?lists.last(i):lists.head(i),a=this.modules[o||"editor"];return!o&&this[n]?this[n].apply(this,e):a&&a[n]&&a.shouldInitialize()?a[n].apply(a,e):void 0}}
//# sourceMappingURL=/sm/ac3883a237cf8007ada16bc10fa59c22f2b1992cdb14bcc7b4b03cd6cd1a736c.map