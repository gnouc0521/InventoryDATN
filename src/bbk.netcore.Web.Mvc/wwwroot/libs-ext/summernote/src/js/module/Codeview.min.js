/**
 * Minified by jsDelivr using Terser v5.9.0.
 * Original file: /npm/summernote@0.8.20/src/js/module/Codeview.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import dom from"../core/dom";import key from"../core/key";export default class CodeView{constructor(t){this.context=t,this.$editor=t.layoutInfo.editor,this.$editable=t.layoutInfo.editable,this.$codable=t.layoutInfo.codable,this.options=t.options,this.CodeMirrorConstructor=window.CodeMirror,this.options.codemirror.CodeMirrorConstructor&&(this.CodeMirrorConstructor=this.options.codemirror.CodeMirrorConstructor)}sync(t){const e=this.isActivated(),i=this.CodeMirrorConstructor;e&&(t?i?this.$codable.data("cmEditor").getDoc().setValue(t):this.$codable.val(t):i&&this.$codable.data("cmEditor").save())}initialize(){this.$codable.on("keyup",(t=>{t.keyCode===key.code.ESCAPE&&this.deactivate()}))}isActivated(){return this.$editor.hasClass("codeview")}toggle(){this.isActivated()?this.deactivate():this.activate(),this.context.triggerEvent("codeview.toggled")}purify(t){if(this.options.codeviewFilter&&(t=t.replace(this.options.codeviewFilterRegex,""),this.options.codeviewIframeFilter)){const e=this.options.codeviewIframeWhitelistSrc.concat(this.options.codeviewIframeWhitelistSrcBase);t=t.replace(/(<iframe.*?>.*?(?:<\/iframe>)?)/gi,(function(t){if(/<.+src(?==?('|"|\s)?)[\s\S]+src(?=('|"|\s)?)[^>]*?>/i.test(t))return"";for(const i of e)if(new RegExp('src="(https?:)?//'+i.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")+'/(.+)"').test(t))return t;return""}))}return t}activate(){const t=this.CodeMirrorConstructor;if(this.$codable.val(dom.html(this.$editable,this.options.prettifyHtml)),this.$codable.height(this.$editable.height()),this.context.invoke("toolbar.updateCodeview",!0),this.context.invoke("airPopover.updateCodeview",!0),this.$editor.addClass("codeview"),this.$codable.focus(),t){const e=t.fromTextArea(this.$codable[0],this.options.codemirror);if(this.options.codemirror.tern){const i=new t.TernServer(this.options.codemirror.tern);e.ternServer=i,e.on("cursorActivity",(t=>{i.updateArgHints(t)}))}e.on("blur",(t=>{this.context.triggerEvent("blur.codeview",e.getValue(),t)})),e.on("change",(()=>{this.context.triggerEvent("change.codeview",e.getValue(),e)})),e.setSize(null,this.$editable.outerHeight()),this.$codable.data("cmEditor",e)}else this.$codable.on("blur",(t=>{this.context.triggerEvent("blur.codeview",this.$codable.val(),t)})),this.$codable.on("input",(()=>{this.context.triggerEvent("change.codeview",this.$codable.val(),this.$codable)}))}deactivate(){if(this.CodeMirrorConstructor){const t=this.$codable.data("cmEditor");this.$codable.val(t.getValue()),t.toTextArea()}const t=this.purify(dom.value(this.$codable,this.options.prettifyHtml)||dom.emptyPara),e=this.$editable.html()!==t;this.$editable.html(t),this.$editable.height(this.options.height?this.$codable.height():"auto"),this.$editor.removeClass("codeview"),e&&this.context.triggerEvent("change",this.$editable.html(),this.$editable),this.$editable.focus(),this.context.invoke("toolbar.updateCodeview",!1),this.context.invoke("airPopover.updateCodeview",!1)}destroy(){this.isActivated()&&this.deactivate()}}
//# sourceMappingURL=/sm/02a1ada78a2d1cdf549b42489ab9f28ed8f74dab4ee4d8c5792190bb4ee7e272.map