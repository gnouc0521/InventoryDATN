/**
 * Minified by jsDelivr using Terser v5.9.0.
 * Original file: /npm/summernote@0.8.20/src/js/module/LinkDialog.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import $ from"jquery";import env from"../core/env";import key from"../core/key";import func from"../core/func";export default class LinkDialog{constructor(t){this.context=t,this.ui=$.summernote.ui,this.$body=$(document.body),this.$editor=t.layoutInfo.editor,this.options=t.options,this.lang=this.options.langInfo,t.memo("help.linkDialog.show",this.options.langInfo.help["linkDialog.show"])}initialize(){const t=this.options.dialogsInBody?this.$body:this.options.container,i=['<div class="form-group note-form-group">',`<label for="note-dialog-link-txt-${this.options.id}" class="note-form-label">${this.lang.link.textToDisplay}</label>`,`<input id="note-dialog-link-txt-${this.options.id}" class="note-link-text form-control note-form-control note-input" type="text"/>`,"</div>",'<div class="form-group note-form-group">',`<label for="note-dialog-link-url-${this.options.id}" class="note-form-label">${this.lang.link.url}</label>`,`<input id="note-dialog-link-url-${this.options.id}" class="note-link-url form-control note-form-control note-input" type="text" value="http://"/>`,"</div>",this.options.disableLinkTarget?"":$("<div></div>").append(this.ui.checkbox({className:"sn-checkbox-open-in-new-window",text:this.lang.link.openInNewWindow,checked:!0}).render()).html(),$("<div></div>").append(this.ui.checkbox({className:"sn-checkbox-use-protocol",text:this.lang.link.useProtocol,checked:!0}).render()).html()].join(""),o=`<input type="button" href="#" class="btn btn-primary note-btn note-btn-primary note-link-btn" value="${this.lang.link.insert}" disabled>`;this.$dialog=this.ui.dialog({className:"link-dialog",title:this.lang.link.insert,fade:this.options.dialogsFade,body:i,footer:o}).render().appendTo(t)}destroy(){this.ui.hideDialog(this.$dialog),this.$dialog.remove()}bindEnterKey(t,i){t.on("keypress",(t=>{t.keyCode===key.code.ENTER&&(t.preventDefault(),i.trigger("click"))}))}toggleLinkBtn(t,i,o){this.ui.toggleBtn(t,i.val()&&o.val())}showLinkDialog(t){return $.Deferred((i=>{const o=this.$dialog.find(".note-link-text"),e=this.$dialog.find(".note-link-url"),n=this.$dialog.find(".note-link-btn"),s=this.$dialog.find(".sn-checkbox-open-in-new-window input[type=checkbox]"),l=this.$dialog.find(".sn-checkbox-use-protocol input[type=checkbox]");this.ui.onDialogShown(this.$dialog,(()=>{this.context.triggerEvent("dialog.shown"),!t.url&&func.isValidUrl(t.text)&&(t.url=t.text),o.on("input paste propertychange",(()=>{t.text=o.val(),this.toggleLinkBtn(n,o,e)})).val(t.text),e.on("input paste propertychange",(()=>{t.text||o.val(e.val()),this.toggleLinkBtn(n,o,e)})).val(t.url),env.isSupportTouch||e.trigger("focus"),this.toggleLinkBtn(n,o,e),this.bindEnterKey(e,n),this.bindEnterKey(o,n);const r=void 0!==t.isNewWindow?t.isNewWindow:this.context.options.linkTargetBlank;s.prop("checked",r);const a=!t.url&&this.context.options.useProtocol;l.prop("checked",a),n.one("click",(n=>{n.preventDefault(),i.resolve({range:t.range,url:e.val(),text:o.val(),isNewWindow:s.is(":checked"),checkProtocol:l.is(":checked")}),this.ui.hideDialog(this.$dialog)}))})),this.ui.onDialogHidden(this.$dialog,(()=>{o.off(),e.off(),n.off(),"pending"===i.state()&&i.reject()})),this.ui.showDialog(this.$dialog)})).promise()}show(){const t=this.context.invoke("editor.getLinkInfo");this.context.invoke("editor.saveRange"),this.showLinkDialog(t).then((t=>{this.context.invoke("editor.restoreRange"),this.context.invoke("editor.createLink",t)})).fail((()=>{this.context.invoke("editor.restoreRange")}))}}
//# sourceMappingURL=/sm/d5a22752b976039a0a4b4eaed9f89b3a9663d87c112b1baf99e5bf17dab07671.map